#+STARTUP: showall indent hidestars

План по преобразовыванию считанных строк из stdin в лисповые
списки, которые затем можно будет анализировать как выражение
схемы и исполнять.

Внимание, по-русски символ может быть как именем переменной, так и
символом строки. Чтоб избежать путаницы, символ строки мы будем называть
знаком строки, а символ строки - это совокупность знаков строки от пробела до пробела.

Т.е. если у нас строка "мама мыла раму 11 раз", то "мама" и "11" - это символы. А "а" -
буква, которая несколько раз встречается в строке - это знак строки.

Этапы преобразования:
- прочитать все из stdin в массив char
- провести синтаксический анализ: определить, что есть каждый компонент строки -
  число, имя, пробел или скобки
- преобразовать прочитанную строку в выражение-список, который в дальнейшем можно
  будет анализировать как выражение схемы.

Как происходит разбор выражения.
Мы берем каждый новый элемент строки и анализируем его. Элемент может быть:
- открывающей скобкой
- закрывающей скобкой
- строкой, представляющей число, т.е. "1", "2462" и т.д.
- пробелом
- набором букв типа "lambda", "let", "set" и т.д.

Обработка всех этих компонентов происходит по-разному.

Пробелы.
Пробелы считаются границами символов, т.е. все что между двумя проблеами
считается одним символом. Сами пробелы - их аски кода - в структуры не
записываются, они нам не нужны, и частью будущего лиспового выражения не
являются, т.к. служат только для удобства чтения выражений юзером.

Открывающие и закрывающие скобки.
Считаются границами выражений. Все что находится между открывающей и
закрывающей скобкой считается единым выражением. Открывающих и
закрывающих скобок должно быть поровну, в противном случае пользователь
что-то напутал с сикнтаксисом.

Встретив открывающую скобку, нам нужно гдето отметить, что все следующее
далее нужно будет объединить в отдельный список. Возможно, под каждое
выражение нужно создавать массив, в которым будут записывать структуры,
заполненные символами, прочитанными из этого выражения.

Встретив закрывающую скобку мы понимаем, что выражение закончилось и
объединяем в список все структуры, которые находились в массиве структур
этого выражения. Возвращаем указатель на этот список.

Строки-числа.
Если мы понимаем, что данный символ - это число, то мы преобразовываем
строку в ее числовой эквивалент (т.е. "1234" превращается в число 1234),
заводим int, в который записываем это число, затем создаем структуру val
и записываем в нее это число. Указатель на структуру записывается в
массив структур.

Строки с набором букв.
В этом случае мы заводим массив char по кол-ву букв и записываем
в него прочитанный символ. Затем заводим структуру val и пишем значение в
нее. Указатель на структуру записывается в массив структур.


Детальный план распознавания выражения
0. Возможно, перед анализом выражения стоит посчитать кол-во открывающих
   и закрывающих скобок. Если их неравное кол-во, то выдать сообщение о
   синтаксической ошибке.
1. Завели массив для текущего символа, в него будет помещаться строка
   символа без пробелов.
2. Завели флаг пробела space_flag. По умолчанию = 0.
3. Начинаем побайтовый анализ строки, т.е. буква за буквой, знак за
   знаком.

Знак строки == пробел.
Смотрим на space_flag.

Если space_flag = 0, значит, символ еще не прочитан и преобразовывать
нечего. Тогда мы делаем следующее:
- установить 1 в space_flag
- начиная со следующего знака строки переносить знаки  в массив текущего
  символа, пока не наткнемся на след. пробел

Если space_flag = 1, значит, символ уже был прочитан и записан в массив
текущего символа. Тогда мы делаем:
- установить 0 в space_flag
- узнать, текущий прочитанный символ - это имя или число. TODO сделать
  для этого предикаты
- отправить символ на преобразование в структуру val
- сохранить указатель на структуру в массив структур текущего выражения
- продолжить анализ строки

Знак строки == открывающая скобка.
Это значит, что мы наткнулись на новое выражение.
- инкрементировать счетчик открывающих скобок
- инициализировать массив структур типа val для текущего выражения
- продолжить анализ строки. Отныне и до встречи закрывающей скобки все
  сформированные структуры val будут записывать в новый массив.

Знак строки == закрывающая скобка.
Значит, мы наткнулись на конец выражеия.
- увеличить счетчик закрывающих скобок
- создать список из всех структур val в массиве текущего выражения
- вернуть указатель на список

Знак строки != скобкам или пробелу.
Значит, это часть какого-то символа, который будет являться частью
выражения. Например, мы наткнулись на букву из слова "lambda".
В таком случае мы просто записываем этот знак строки в массив текущего
символа и идем анализировать строку дальше.

4. Достигли конца ввода.
В этом случае возвращаем указатель на получившийся список, сформированный
из структур val.
