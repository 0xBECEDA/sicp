#+STARTUP: showall indent hidestars

План по преобразовыванию считанных строк из stdin в лисповые
списки, которые затем можно будет анализировать как выражение
схемы и исполнять.

Внимание, по-русски символ может быть как именем переменной, так и
символом строки. Чтоб избежать путаницы, символ строки мы будем называть
знаком строки, а символ строки - это совокупность знаков строки от пробела до пробела.

Т.е. если у нас строка "мама мыла раму 11 раз", то "мама" и "11" - это символы. А "а" -
буква, которая несколько раз встречается в строке - это знак строки.


 ~Этапы преобразования:~
- прочитать все из stdin в массив char - этим занимается процедура
  ~read_input~
- подсчитать количество скобок в строке: если отрывающих и закрывающих
  скобок не поровну, ждем, пока юзер допишет выражение. Выражение
  считается законченным, когда у каждой открывающей скобки есть парная ей
  закрывающуя скобка.
  Этим занимается ~check_brackets~
- преобразовать прочитанную строку в выражение-список, которое будет
  состоять только из чисел, символов - т.е. слов, имен переменных и т.д.,
  и скобок - они станут частью выражния. Это нужно, чтоб в при следующем
  преобразовании собрать элементы этого списка - числа, буквы и т.д. -  в список,
  каким его хотел видеть юзер.

  Т.е. строка "(1 2 (3 4) 5)" будет превращена в список
  ( '(' '1' '2' '(''3' '4' ')' '5' ')' ), где все элементы, заключенные в
  кавычки, являются элементами списка - стрктурами типа ~val~
  Этим занимается процедура ~parse_input~

- преобразовать полученный на предыдущем этапе список в лисп-выражение,
  которое сможет проанализировать интерпретатор.

  Т.е. список ( '(' '1' '2' '(''3' '4' ')' '5' ')' ) превратится в
  выражение (1 2 (3 4) 5).
  Этим занимается ~transform_list~



~За чтение выражение отвечает следующая функция:~


Она ждет пользовательский ввод и возвращает массив указателей на строки.
Мы считываем ввод построчно, пока либо не достигнем максимального размера
ввода, либо этого ввода.

#+NAME: read_input
#+BEGIN_SRC cpp :noweb yes
  char** read_input(int max_input_size, int max_str_size) {
      char*  string = malloc(sizeof(char) * max_str_size);
      char** array_strings = malloc(sizeof(char*) * max_input_size);;

      // заполняем массив указателей указателями на NULL, чтоб в массиве не было мусора
      for( int i = 0; i < max_input_size; i++) {
          array_strings[i] = NULL;
      }

      int i = 0;
      int j = 0;

      while( ( fgets( string, max_str_size, stdin ) != NULL ) || i == max_input_size ) {
          array_strings[i] = string;

          // проверяем скобки в строках
          if ( check_brackets ( array_strings ) ) {
              // если все на месте, возвращаем прочтенное из stdin
              return array_strings;

              // иначе ждем новую строку
          } else {
              string = malloc(sizeof(char) * max_str_size);
              i++;
          }
      }
      return array_strings;
  }
#+END_SRC

Как происходит разбор ввода.
Анализируем мы строку за строкой.
Мы берем каждый новый элемент строки и анализируем его. Элемент может быть:
- открывающей скобкой
- закрывающей скобкой
- строкой, представляющей число, т.е. "1", "2462" и т.д.
- пробелом
- набором букв типа "lambda", "let", "set" и т.д.

Обработка всех этих компонентов происходит по-разному.

Сначала заводим необходимые переменные и массивы:
- максимальный размер числа или слова - у нас 100 букв или цифр, которые
  идут без пробелов
- массив, в котором мы будем накапливать знаки строки, пока не встретим
  пробел
- переменную-индекс для этого массива
- результирующий список - в нем будут накапливаться списки из
  преобразованных строк
- переменная для хранения адреса текущей новой строктуры

#+NAME: parse_input_vars
#+BEGIN_SRC cpp :noweb yes
      /* максимальный размер одного слова или числа */
      int cur_symbol_max_size = 100;
      /* счетчик  */
      int cur_symbol_cnt = 0;
      char cur_symbol [cur_symbol_max_size];
      val* new_struct;
      val* retval_list = nil_constructor();
#+END_SRC


Теперь можно приступать к разбору конкретной строки - этим занимается
~parse_string~

#+NAME: parse_string
#+BEGIN_SRC cpp :noweb yes
  val* parse_string( char* string) {
      <<parse_string_var>>
      <<parse_string_cycle>>
  }
#+END_SRC

Создаем переменную для хранения текущего списка пробразовыннх элементов
#+NAME: parse_string_var
#+BEGIN_SRC cpp :noweb yes
  val* cur_str_list = nil_constructor();
#+END_SRC

Затем в цикле анализируем каждый знак строки.

#+NAME: parse_string_cycle
#+BEGIN_SRC cpp :noweb yes
  for(int i = 0; ; i++) {

      switch (string[i]) {

      <<end_of_string>>

      <<space>>

      <<opening_bracket>>
          <<>>

      }
   }

#+END_SRC

Строка кончилась.
Значит, пора преобразовать последний прочитанный символ в структуру
~val~ - если что-то было прочитано - , присоединить ее к текущему
результирующему списку и вернуть его.

#+NAME: end_of_string
#+BEGIN_SRC cpp :noweb yes
   case 0:
  if (cur_symbol_cnt != 0) {

      new_struct = malloc(sizeof(val));
      new_struct = transform_symbol_string_to_val_struct( cur_symbol );

      cur_str_list = append(cur_str_list,
                            cons( new_struct, nil_constructor()));
      return cur_str_list;
   }
  return cur_str_list;
#+END_SRC

Пробел.
Пробелы считаются границами символов, т.е. все что между двумя проблеами
считается одним символом. Сами пробелы - их аски-коды - в структуры не
записываются, они нам не нужны, и частью будущего лиспового выражения не
являются, т.к. служат только для удобства чтения выражений юзером.

#+NAME: space
#+BEGIN_SRC cpp :noweb yes
  /* встретили пробел */
   case ' ':
  if( cur_symbol_cnt != 0) {
      new_struct = malloc(sizeof(val));
      new_struct = transform_symbol_string_to_val_struct( cur_symbol );
      cur_str_list = append(cur_str_list,
                            cons( new_struct, nil_constructor()));

      cur_symbol_cnt = 0;
      clear_array(cur_symbol, cur_symbol_max_size);
   }
  break;
#+END_SRC

Открывающие и закрывающие скобки.
Считаются границами выражений. Все что находится между открывающей и
закрывающей скобкой считается единым выражением. Открывающих и
закрывающих скобок должно быть поровну, в противном случае пользователь
что-то напутал с сикнтаксисом.

Открывающая скобка.
У нас начинается новое выражение.
Мы создаем структуру ~val~, значением которой является '(', очищаем буфер
с накопленными знаками строки и присоединям новую строктуру к результирующему
списку.

Массив с накопленными знаками строки очищается каждый раз после трансформации
накопленных знаков в структуру, поскольку числа или слова, которые мы
читаем, могут быть разных размеров. Если просто установить индекс массив
в 0 и начать писать сначала, то мы можем столкнуться с ситуацией, когда в
массиве остались знаки строки от прошлого символа, в результате мы
получаем чушь.

#+NAME: opening_bracket
#+BEGIN_SRC cpp :noweb yes
  /* встретили открывающую скобку */
   case '(':
  new_struct = malloc(sizeof(val));
  cur_symbol[cur_symbol_cnt] = string[i];
  new_struct = transform_symbol_string_to_val_struct( cur_symbol );

  cur_symbol_cnt = 0;
  clear_array(cur_symbol, cur_symbol_max_size);

  cur_str_list = append(cur_str_list,
                        cons( new_struct, nil_constructor()));

  break;
#+END_SRC

Закрывающая кобка.
Означает конец выражения как правило.
Далее мы смотрим:
если ли в массиве знаков строки какие-то символы?
Если да, то:
- мы сначала превращаем эти знаки в значение структуру
- присоединяем ее к результрующему списку
- очищаем массив
- только затем заносим в массив ')'
- затем преобразовываем его в структуру и присоединяем к списку

Зачем нап проверять наличие дргих знаков строки в массиве?
Дело в том, что юзер скорее всего вводил выражение как ~(+ 1 2)~, как мы
видим, число ~2~ и закрывающая скобка не имеют пробела между
собой. Следовательно, если мы не проверим, что у нас записано в массиве -
а у нас там записано ~2~ в данный момент - и не преобразуем это в
структуру отдельно, то вместо двух структур со значениеями ~2~ и ~)~
соответственно, которые мы можем в дальнейшем проанализировать, мы
получим одну структуру со значением ~2)~ - и вот это уже проанализировать
будет нельзя.

Если в массиве ничего нет, то мы просто преобразовываем ')' в структуру и
присоединяем ее к списку.

#+NAME: closing_bracket
#+BEGIN_SRC cpp :noweb yes
  /* встретили закрывающую скобку */
   case ')':
  if( cur_symbol_cnt != 0) {

      new_struct = malloc(sizeof(val));
      new_struct = transform_symbol_string_to_val_struct( cur_symbol );

      cur_str_list = append(cur_str_list,
                            cons( new_struct, nil_constructor()));

      cur_symbol_cnt = 0;
      clear_array(cur_symbol, cur_symbol_max_size);

      cur_symbol[cur_symbol_cnt] = string[i];
      new_struct = transform_symbol_string_to_val_struct( cur_symbol );

      cur_str_list = append(cur_str_list,
                            cons( new_struct, nil_constructor()));

      cur_symbol_cnt = 0;
      clear_array(cur_symbol, cur_symbol_max_size);

   } else {
      cur_symbol[cur_symbol_cnt] = string[i];
      new_struct = transform_symbol_string_to_val_struct( cur_symbol );

      cur_str_list = append(cur_str_list,
                            cons( new_struct, nil_constructor()));

      cur_symbol_cnt = 0;
      clear_array(cur_symbol, cur_symbol_max_size);
   }

  break;
#+END_SRC

Перевод строки.
Мы его обрабатываем так же, как пробел, т.к. перевод строки тоже несет
разграничивающую функцию между символами строки.
#+NAME: new_string
#+BEGIN_SRC cpp :noweb yes
  /* встретили перевод строки */
   case'\n':
  if( cur_symbol_cnt != 0) {

      new_struct = malloc(sizeof(val));
      new_struct = transform_symbol_string_to_val_struct( cur_symbol );

      cur_str_list = append(cur_str_list,
                            cons( new_struct, nil_constructor()));

      cur_symbol_cnt = 0;
      clear_array(cur_symbol, cur_symbol_max_size);
   }
  break;
#+END_SRC

Это не перевод строки, не пробел и не скобки.
Раз уж ничего не подошло, то скорее всего это какой-то символ - буква или
число. В таком случае мы просто накапливаем знаки строки до ближайшего
пробела, скобки или перевода строки.

Зачем накапливать?
Дело в том, что символы могут быть разной длины: в будущем юзер может
ввести имя ~b~ или ~cons~ и пока знаки строки подобного типа не кончатся,
мы их копим.
#+NAME: parse_string_default
#+BEGIN_SRC cpp :noweb yes
  /* встретили иной символ - буква или число */
   default:
  cur_symbol[cur_symbol_cnt] = string[i];
  cur_symbol_cnt++;
#+END_SRC

Теперь подробнее про преобразование символов строки в структуры.
Во-первых, нам нужно определить, что у нас за символ - это слово, число
или скобка.
Если это строка-число, то мы переводим ее в число.
Если это иной символ, то мы просто переводим его как значение структуры.

Данный предикат определяет, является ли данная строка представлением
числа. Мы считаем, что если первый знак этой строки - число, то она вся
является числом, т.к. в s-выражениях символы и числа разграничены
пробелами.

#+NAME: num_str_predicate
#+BEGIN_SRC cpp :noweb yes
int num_str_predicate(char* symbol_str) {
    if(symbol_str[0] == '0' ||
       symbol_str[0] == '1' ||
       symbol_str[0] == '2' ||
       symbol_str[0] == '3' ||
       symbol_str[0] == '4' ||
       symbol_str[0] == '5' ||
       symbol_str[0] == '6' ||
       symbol_str[0] == '7' ||
       symbol_str[0] == '8' ||
       symbol_str[0] == '9') {
        return 1;
    }
    return 0;
}
#+END_SRC

Строки-числа.
Если мы понимаем, что данный символ - это число, то мы преобразовываем
строку в ее числовой эквивалент (т.е. "1234" превращается в число 1234),
заводим int, в который записываем это число, затем создаем структуру val
и записываем в нее это число.

Для этого нам понадобится несколько операций.

Строки с набором букв.
В этом случае мы заводим массив char по кол-ву букв и записываем
в него прочитанный символ. Затем заводим структуру val и пишем значение в
нее.
