#+STARTUP: showall indent hidestars

Тест нехвостовой рекурсии и окружений.
#+BEGIN_SRC scheme
    (define (factorial n)
      (if (= n 0)
          1
          (* n (factorial (- n 1)))))

    (factorial 3)

    (factorial 6)

    (define n 5)

    (factorial n)

    (factorial 4)
#+END_SRC

Тест хвостовой рекурсии.

#+BEGIN_SRC scheme
  (define (my-reverse lst)
    (define (my-reverse lst new-lst)
      (if (null? lst)
          new-lst
          (my-reverse (cdr lst) (cons (car lst) new-lst))))
    (my-reverse lst '()))


  (my-reverse '(1 2 3 4))

  (my-reverse '(1 (2 3) 4))

  ;; должен выдать ошибку
  (my-reverse '(1 (2 3) 4) 'd)

  ;; должен выдать ошибку
  (my-reverse "d")

#+END_SRC

Тест cond в разный вариантах
#+BEGIN_SRC scheme
  (define (cond-test arg)
    (cond ((atom? arg) 'atom)
          ((pair? arg) 'pair)
          ((dotpair? arg) 'dotpair)
          ((null? arg) 'null)
          (else
           "Неизвестый тип аргумента" )))


  (cond-test '(1 2 3 4))
  (cond-test 'k)
  (cond-test 3)
  (cond-test (cons 1 2))
  (cond-test '())
  (cond-test "sdD")

  (define (cond-test arg)
    (cond ((atom? arg) "atom")
          ((pair? arg) "pair")
          ((dotpair? arg) "dotpai")
          ((null? arg) "null")
          (else
           "Неизвестый тип аргумента" )))

  (cond-test '(1 2 3 4))
  (cond-test 'k)
  (cond-test 3)
  (cond-test (cons 1 2))
  (cond-test '())
  (cond-test "sdD")

  ;; должен выдать ошибку
  (cond-test '(1 2 3 4) 'k)

  ;; должен выдать ошибку
  (define (cond-test arg)
    (cond ((atom? arg) "atom")
          ((pair? arg) "pair")
          ((dotpair? arg) "dotpai")
          ((null? arg) "null")))

  ;; должен выдать ошибку
  (define (cond-test arg)
    (cond ((atom? arg) "atom")
          ((pair? arg) "pair")
          (else "какая-то ошибка")
          ((dotpair? arg) "dotpai")
          ((null? arg) "null")))
#+END_SRC


Тест древовидной рекурсии.
#+BEGIN_SRC scheme
  (define (fib n)
    (cond ((= n 0) 0)
          ((= n 1) 1)
          (else (+ (fib (- n 1))
                   (fib (- n 2))))))

  (fib 8)

  (fib 0)
#+END_SRC

Тест арифметических выражений

#+BEGIN_SRC scheme
    (+ 5 3 4)
    ;; => 12

    (- 9 1)
    ;; => 8

    (/ 6 2)
    ;; => 3

    (+ (* 2 4) (- 4 6))
    ;; => 6

    (define a 3)
    ;; => 3

    (define b (+ a 1))
    ;; => 4

    (+ a b (* a b))
    ;; => 19

    (= a b)
    ;; => false

    (if (and (> b a) (< b (* a b)))
        b
        a)
    ;; => a (т.е. 4)

    (cond ((= a 4) 6)
          ((= b 4) (+ 6 7 a))
          (else 25))
    ;; => 16

    (+ 2
       (if (> b a)
           b
           a))
    ;; => 6

    (* (cond ((> a b) a)
             ((< a b) b)
             (else -1))
       (+ a 1))

    ;; => 16
  #+END_SRC


Тест модели передачи сообщений
#+BEGIN_SRC scheme
  (define (make-account balance)
    (define (withdraw amount)
      (if (or (> balance amount) (= balance amount))
          (begin (set! balance (- balance amount))
                 balance)
          "Недостаточно денег на счете"))
    (define (deposit amount)
      (set! balance (+ balance amount))
      balance)
    (define (dispatch m)
      (cond ((eq? m 'withdraw) withdraw)
            ((eq? m 'deposit) deposit)
            (else (error "Неизвестный вызов -- MAKE-ACCOUNT"
                         m))))
    dispatch)


  (define account (make-account 100))


  ((account 'deposit) 100)
  ((account 'withdraw) 50)
#+END_SRC
